In this lecture, allow the current user to basically delete his account. 
We won't actually delete the account. We'll just set the acount to inactive so that the user might in
the future reactivate the account.
First, let's add a new field to our userModel.js at the end of all others at this point.
  active: {
    type: Boolean,
    default: true,
    select: false
  }
select has been set to false because we don't want anyone to know that this active flag exists.

userController.js:
!
!
exports.deleteMe = catchAsync(async (req, res, next) => {
  await User.findByIdAndUpdate(req.user.id, { active: false });

  res.status(204).json({
    status: 'success',
    data: null
  });
});
!
!
userRoutes.js:
router.delete('/deleteMe', authController.protect, userController.deleteMe);

Go to postman:
DELETE
{{URL}}api/v1/users/deleteMe
Authorization: Bearer Token: {{jwt}}

We don't need to pass any data in the body or url
Hit send on post man and if this is succesful:
on mongodb, the user that was logged in has an new field 'active: false'

As a last step, we don't want to show the inactive users in the output.
To accomplish this, we are gonna use query middleware. We can add a step before any other query 
On our userModel.js, let's add a pre('find')

after userSchama pre save,

userSchema.pre(/^find/, function(next) {
  //this points to the current query
  this.find({ active: { $ne: false } });
  next();
});

now, getAllUsers:
GET: {{URL}}api/v1/users
hit send

and we the user we deleted is not visible on postman. On the other hand, 
if we get into our natours database, we can see the user with active set to false plus all other users


userModel.js
!
!
!const userSchema = new mongoose.Schema({
 !
 !
 !
  active: {
    type: Boolean,
    default: true,
    select: false
  }
});
!
!
!
userSchema.pre(/^find/, function(next) {
  //this points to the current query
  this.find({ active: { $ne: false } });
  next();
});
!
!
!


userRoutes.js (New route)
router.delete('/deleteMe', authController.protect, userController.deleteMe);


userController.js (Just after UpdateMe)
exports.deleteMe = catchAsync(async (req, res, next) => {
  await User.findByIdAndUpdate(req.user.id, { active: false });

  res.status(204).json({
    status: 'success',
    data: null
  });
});
