Rate limiting is implemented to prevent the same IP address from making too 
many requests.
This will help us prevent DOS(Denial of Service) or Bruteforce attacks.
The rate limiter will be implemented as a global middleware function. It will count the number 
of requests coming from one IP then when there are too many reauests, block these requests.

We do this in app.js.
we first have to install a new package (express rate limiter)
npm i express-rate-limit // type this on the terminal

This time we'll allow 100 requests from the same request in on hour.
We kind of need to find a balance for what works best for our application. e.g if we are
building an API which needs alot of requests for one IP then max should be greater
It is a middleware function. we can implement it in app.use
After this, we can getAllTours from postman.
Observe the headers tab. Rate limiter creates two tabs: 
X-RateLimit-Limit and X-RateLimit-Remaining

X-RateLimit-Remaining is now remaining 99
go to getTour and make another request. 
X-RateLimit-Remaining is reduces to 98.
So long as the IP address is making requests, this value is going to reduce

Still under header, there is X-RateLimit-Reset and currently is has 1654604496
If you go back to your code and refresh, rerun the natours application, this value will be reset 
to an initial value. I've just done that and sent a request and the new'X-RateLimit-Reset'  is 1654605767

take down the max from 100 to 3.
Make all three requests and observe the body. If you are to make a request and 
X-RateLimit-Remaining = 0, you will receive an error message saying:
'Too many requests from this IP, please try again in an hour'
It will have a code of 429: Too many requests.

app.js
!
!
const rateLimit = require('express-rate-limit');
!
!
//1. GLOBAL MIDDLEWARES
!
const limiter = rateLimit({
  max: 100,
  windowMs: 60 * 60 * 1000,
  message: 'Too many requests from this IP, please try again in an hour'
});
app.use('/api', limiter);
!
!
!