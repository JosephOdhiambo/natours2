Sanitization: Cleaning all data that comes in to the app from malicious 
code(trying to attack our app).
This is done after the body parser in our app.js
below this:
app.use(express.json({ limit: '10kb' }));
Against 2 attacks:

//Data sanitiation against nosql query injection

//Data sanitiation against crosside scripting attacks

Let us simulate an attack from postman. We'll try to login
as someone even when without knowing their  email

on '{{URL}}api/v1/users/login', POST,

enter the following data:
{
    "email": { "$gt": ""},
    "password": "pass1234"
}

To protect against this, let's install another middleware.

npm i express-mongo-sanitize

npm i xss-clean

app.use(mongoSanitize());
looks at the req body, req query string and also req.params then filter out
all the dollar signs and params.

Try the request again and it gives you this.
"Cast to string failed for value \"{}\" (type Object) at path \"email\" for model \"User\""

An attaker would try to insert malicious html with some js code attached to it.
If that would then be injected into our html side, it could cause some damage

Whenever you can, add some validation to your mongoose schemas and 
that would protect you from xss(cross side scripting) on the server side.

app.use(express.static(`${__dirname}/public`));

Let's test this xss. 
First we create an new user from postman and add a divtag
into the name field and see that the symbols are changed

{{URL}}api/v1/users/signup : POST

{
    "name": "<div id='bad-code'>Name</div>",
    "email": "hillary@gmail.com",
    "password": "pass1234",
    "passwordConfirm": "pass1234",
    "role": "admin"
}

Below is the response
{
    "status": "success",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyYTFkMjFmNzY0NGU0MjVkODhkODhmMCIsImlhdCI6MTY1NDc3MjI1NiwiZXhwIjoxNjYyNTQ4MjU2fQ.ZSsERzzFeKo51RWY8ZSQ3y6RXuCHjIIMeDWKX1X_lX4",
    "data": {
        "user": {
            "role": "user",
            "active": true,
            "_id": "62a1d21f7644e425d88d88f0",
            "name": "&lt;div id='bad-code'>Name&lt;/div>",
            "email": "hillary@gmail.com",
            "__v": 0
        }
    }
}

without xss protection, the name would be:
"name": "<div id='bad-code'>Name</div>"

app.js
const express = require('express');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const mongoSanitize = require('express-mongo-sanitize');
const xss = require('xss-clean');

const AppError = require('./utils/appError');
const globalErrorHandler = require('./controllers/errorController');
const tourRouter = require('./routes/tourRoutes');
const userRouter = require('./routes/userRoutes');

const app = express();
//1. GLOBAL MIDDLEWARES
//Security HTTP headers
app.use(helmet());

//Development logging
if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'));
}

//Limit requests from same API
const limiter = rateLimit({
  max: 100,
  windowMs: 60 * 60 * 1000,
  message: 'Too many requests from this IP, please try again in an hour'
});
app.use('/api', limiter);

//Body parser, reading data from the body into req.body
app.use(express.json({ limit: '10kb' }));

//Data sanitiation against nosql query injection
app.use(mongoSanitize());

//Data sanitiation against crosside scripting
app.use(xss());

//Serving static files
app.use(express.static(`${__dirname}/public`));

//Test middleware
app.use((req, res, next) => {
  req.requestTime = new Date().toISOString();
  next();
});

//2. ROUTE HANDLERS

//3. ROUTES

//Mounting The router
app.use('/api/v1/tours', tourRouter);
app.use('/api/v1/users', userRouter);

app.all('*', (req, res, next) => {
  // const err = new Error(`Can't find ${req.originalUrl} on this server!`); //Built in error constuctor
  next(new AppError(`Can't find ${req.originalUrl} on this server!`, 404));
});

app.use(globalErrorHandler);
//4. START SERVER
module.exports = app;


