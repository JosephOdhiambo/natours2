Compromised database:
Strongly encrypt passwords with salt and hash(bcrypt)
Stringly encrypt password reset token(SHA 256)

Brute Force attacks:
Use bcrypt to make login requests slow
implement rate limiting (express-rate-limit)
Implement maximum login attempts

Cross-site scripting (XSS) attacks:
Strore JWT HTTPOnly cookies
Sanitize user input data
Set special HTTP headers (helmet package) -middleware

Denial of service (DOS) attack
Implement rate limiting (express rate limit)
Limit body payload (in body parser)
Avoid evil regular expressions

NOSQL QUery Injection
Use mongoose for MongoDB (because of SchemaTypes
Sanitize user input data

Other Best Practices and suggestions:
Always use HTTPS
Create random password reset tokens with expiry dates
Deny access to JWT after password change
Don't commit sensitive config data to Git
Don't send error details to clients
Prevent Cross-Site Request Forgery (csurf package)
Require re-authentication before a high-value action
Implement a blacklist of untrusted JWT
Confirm user email address after first creating account
Keep user logged in with refresh tokens
Implement two-factor authentication
Prevent paramater pollution causing Uncaught Exceptions


In production, all communication between client and server needs to happen
over https otherwise anyone can listen into the conversation and steal our JWT


